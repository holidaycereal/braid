vim:expandtab

bnf grammar for braid
[x] - x is optional
x*  - 0 or more of x
x+  - 1 or more of x

<program>          ::= <directive>* <toplevel-def>* <entry>
<directive>        ::= <import> | <include>
<toplevel-def>     ::= <assignment>
                     | <declaration>
                     | <const-def>
                     | <type-def>
                     | <record-def>
                     | <fn-def>
<entry>            ::= "main" "{" <statement>* "}"

<statement>        ::= <single-statement> ";" | <block>
<single-statement> ::= <assignment>
                     | <reassignment>
                     | <declaration>
                     | <fn-call>
                     | <return>
                     | <break>
                     | <continue>
<block>            ::= <if-block>
                     | <switch-block>
                     | <for-block>
                     | <while-block>

<assignment>       ::= <ident> ":" [<type>] "=" <expr>
<declaration>      ::= <ident> ":" <type>
<reassignment>     ::= <ident> "=" <expr>
<fn-call>          ::= <ident> "(" <argument>* ")"
<return>           ::= "=>" <expr>

<const-def>        ::= "const"  <ident> ":" <type> "=" <expr> ";"
<type-def>         ::= "type"   <ident> "=" <type> ";"
<record-def>       ::= "record" <ident> "{" (<declaration> ";")* "}"

<fn-def>           ::= "fn" <ident> <param>+ [<type-sig>] <fn-body>
<param>            ::= "(" [<ident> ("," <ident>)*] ")"
<type-sig>         ::= ":" <type> ("->" <type>)+
<fn-body>          ::= "{" <statement>* "}" | <return> ";"

<import>           ::= "import"  <module-path> ";"
<include>          ::= "include" <file-path>   ";"

<expr>             ::= <match-expr>
                     | <when-expr>
                     | <const-expr>
                     | <dyn-expr>
                     | <fn-call>

<match-expr>       ::= "match" <expr> "with"
                       ["|"] <match-case>
                       ("|"  <match-case>)*
                       [<fallback>]
<match-case>       ::= <expr> "->" <const-expr>

<when-expr>        ::= "when"
                       ["|"] <when-pred>
                       ("|"  <when-pred>)*
                       <fallback>
<when-pred>        ::= <cond> "->" <expr>

<fallback>         ::= "|" <expr>

<if-block>         ::= "if"    <cond> "{" <statement>* "}"
                       ("elif" <cond> "{" <statement>* "}")*
                       ["else"        "{" <statement>* "}"]

<switch-block>     ::= "switch" <expr> "{"
                       ("case" <const-expr> ":" <statement>*)*
                       ["default"           ":" <statement>*]
                       "}"

<for-block>        ::= "for" <param> "in" <iterable>    "{" <statement>* "}"
<while-block>      ::= "while" <cond> ["," <statement>] "{" <statement>* "}"
