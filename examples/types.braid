-* algebraic type system *-

-- type aliases
type time = i64;
type point = (int, int);

-- sum type (union)
union level { off, low, high }

union status {
	inactive,
	active(time),
}

union option<a> { none, some(a) }

-- product type (record)
record point3 { x: int, y: int, z: int }

record user {
	id : u8,
	name : string,
	status : status,
}

-- usage:
def main() -> () {
	-- records
	-- record literal syntax
	let alice = user with {
		id = 0x01,
		name = "alice",
		status = active(now()),
	};
	-- tuple/constructor syntax
	let bob = user(0x02, "bob", active(now()));

	-- unions
	let x : int = match bob.status {
		inactive -> 0,
		active(\t) -> t,
	};
}
