vim:expandtab

bnf grammar for braid
[x] - x is optional
x*  - 0 or more of x
x+  - 1 or more of x

<program>   ::= <toplevel>* <main-fn>
<main-fn>     ::= "main" "{" <statement>* "}"
<toplevel>  ::= <assignment>
              | <decl>
              | <const-def>
              | <type-def>
              | <record-def>
              | <fn-def>
              | <import>
              | <include>

<import>  ::= "import"  <module-path> ";"
<include> ::= "include" <file-path>   ";"

<const-def>  ::= "const"  <ident> ":" [<type>] "=" <expr> ";"
<type-def>   ::= "type"   <ident> "=" <type> ";"
<record-def> ::= "record" <ident> "{" (<decl> ";")* "}"

<fn-def>     ::= <fn-decl> ("=>" <expr> ";" | "{" <statement>* "}")
<fn-decl>    ::= "fn" <ident> <param-list> | <fn-decl> <param-list>
<param-list> ::= "(" [<ident> ("," <ident>)*] ")"

<statement> ::= <single-statement> ";" | <block>

<single-statement> ::= <assignment>
                     | <reassignment>
                     | <declaration>
                     | <fn-call>
                     | "=>" <expr>  // return statement
                     | "break" <positive-integer>  // break <depth>;
                     | "continue"

<assignment>   ::= <ident> ":" [<type>] "=" <expr>
<reassignment> ::= <ident> "=" <expr>
<declaration>  ::= <ident> ":" <type>

<fn-call>    ::= <ident> <arg-list> | <fn-call> <arg-list>
<arg-list>   ::= "(" [<expr> ("," <expr>)*] ")"

<expr> ::= <match-expr> | <when-expr> | <const-expr> | <dyn-expr> | <fn-call>

<match-expr> ::= "match" <expr> "with"
                      (<expr> "->" <const-expr>)
                 ("|" (<expr> "->" <const-expr>))*
                 ["|" <expr>]

<when-expr>  ::= "when"
                      (<cond> "->" <expr>)
                 ("|" (<cond> "->" <expr>))*
                 "|" <expr>

<block> ::= <switch-block> | <if-block> | <for-block> | <while-block>

<switch-block> ::= "switch" <expr> "{"
                   ("case" <const-expr> ":" <statement>*)*
                   ["default"           ":" <statement>*]
                   "}"

<if-block>     ::= "if"    <cond> "{" <statement>* "}"
                   ("elif" <cond> "{" <statement>* "}")*
                   ["else"        "{" <statement>* "}"]

<for-block>    ::= "for" <param> "in" <iterable>    "{" <statement>* "}"

<while-block>  ::= "while" <cond> ["," <statement>] "{" <statement>* "}"
