<program> ::= <top-level>* <main-fn>
<main-fn> ::= "fn" "main" <fn-body>
<top-level> ::=
    <alias-def>
  | <type-def>
  | <record-def>
  | <union-def>
  | <fn-def>
  | <import>

<alias-def> ::= "alias" <ident> ["(" <ident-list> ")"] "=" <expr> ";"
<type-def>  ::= "type"  <ident> "=" <type> ";"

<record-def>  ::= "record" <ident> <record-body>
<union-def>   ::= "union"  <ident> <union-body>
<record-body> ::=
    ["[" <ident-list> "]"]
    "{" ["^"] <field>   ("^" <field>)*   "}"
<union-body>  ::=
    ["[" <ident-list> "]"]
    "{" ["|"] <variant> ("|" <variant>)* "}"
<field> ::=
    <ident> ":" <type> ["=" <expr>]
  | <ident> <record-body>
  | <ident> <union-body>
<variant> ::=
    <ident>
  | <ident> "(" <type> ")")
  | <ident> <record-body>

<fn-def>  ::= "fn" <ident> <fn-body>
<fn-body> ::=
    ("(" <ident-list> ")")+
    [":" (<type> "->")+ <type> | "->" (<type> "->")* <type>]
    ("{" <stmt>* "}" | <return> ";")

<import> ::= "import" (<ident> ["as" <ident>] | <ident>+ "from" <ident>) ";"

<stmt> ::=
    <mut-decl>
  | <immut-decl>
  | <assign>
  | <fn-call>
  | <return>
  | <break>
  | <continue>
  | <while-block>
  | <for-block>
  | <if-block>
  | <with-block>
  | <switch-block>

<mut-decl>   ::=         <ident> ":" <type> ["=" <expr>] ";"
<immut-decl> ::= "immut" <ident> ":" <type>  "=" <expr>  ";"
<assign>     ::= <ident> "=" <expr>        ";"
<fn-call>    ::= <ident> ("(" <expr> ")")+ ";"
<return>     ::= "=>" <expr>               ";"
<break>      ::= "break" <num-scopes>      ";"
<continue>   ::= "continue"                ";"

<while-block>  ::= "while" <expr> ["," <stmt>] <block-body>
<for-block>    ::= "for" <ident> "in" <expr> <block-body>
<if-block>     ::= "if" <expr> <block-body> <else-clause>
<with-block>   ::= "with" <pattern> "from" <expr> <block-body> <else-clause>
<switch-block> ::=
    "switch" <expr> "{"
    ("case" <pattern-list> ":" <stmt>*)*
    ["default"             ":" <stmt>*]
    "}"

<block-body>  ::= "," <stmt> | "{" <stmt>* "}"
<else-clause> ::= "else" <block-body>

<pattern-list> ::= <pattern> ("|" <pattern>)*
<pattern> ::= <expr> | <ident> | <ident> "(" <ident-list> ")"

<type> ::=
    <primitive>
  | <generic>
  | <tuple-type>
  | <array-type>
  | <functor-app>
  | <type-alias-ref>
  | <record-ref>
  | <union-ref>
  | <inferred>

<primitive>      ::= (uint-type) | (int-type) | (float-type) | (bool-type)
<generic>        ::= <ident>
<tuple-type>     ::= "(" [<type>] ("," <type>)* ")"
<array-type>     ::= "[" <type> "]"
<functor-app>    ::= <ident> "[" <type> "]"
<type-alias-ref> ::= <ident>
<record-ref>     ::= <ident>
<union-ref>      ::= <ident>
<inferred>       ::= ()

<expr> ::=
    <value-literal>
  | <alias-ref>
  | <var-ref>
  | <tuple-literal>
  | <list-literal>
  | <record-literal>
  | <match>
  | <ternary>
  | <unary-op-app>
  | <binary-op-app>
  | <fn-app>
  | <lambda>

<value_literal>  ::= ([0-9]+) | ([0-9]+\.[0.9]+) | "'" (*) "'"
<alias-ref>      ::= <ident>
<var-ref>        ::= <ident>
<tuple-literal>  ::= "(" [<expr>] ("," <expr>)* ")"
<list-literal>   ::= "[" [<expr>] ("," <expr>)* "]" | "\"" (*)* "\""
<record-literal> ::=
    [<ident>] "{"
    ["^"] <ident> "=" <expr>
    ("^"  <ident> "=" <expr>)*
    "}"
<match> ::=
    "match" <expr> "{"
    ["|"] <pattern-list> "->" <expr>
    ("|"  <pattern-list> "->" <expr>)*
    "}"
<ternary>       ::= "when" <expr> "->" <expr> "|" <expr>
<unary-op-app>  ::= <unary-op> <expr>
<binary-op-app> ::= <expr> <binary-op> <expr>
<fn-app>        ::= <ident> ("(" <expr> ")")*
<lambda>        ::= "(" <ident-list> ")" "=>" <expr>

<unary-op>  ::= "~" | "!" | "&"
<binary-op> ::=
    ".<" | ".>" | ":<" | ":>"
  | ".*" | ".+" | ".^"
  | "and" | "or" | "xor"
  | "==" | "!=" | "<=" | ">=" | "<" | ">"
  | "+"  | "-"  | "*"  | "/"  | "%"
  | "."  | "[]" | "++" | ".."

<ident> ::= ([_a-zA-Z][_a-zA-Z0-9]+)
<ident-list> ::= <ident> ("," <ident>)*

vim:expandtab
