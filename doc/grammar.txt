vim:expandtab

<program>   ::= <top-level>* <main-fn>
<main-fn>   ::= <fn-def>
<top-level> ::= <decl>
              | <assign>
              | <const-def>
              | <alias-def>
              | <type-def>
              | <record-def>
              | <union-def>
              | <fn-def>
              | <import-directive>

<decl>       ::= <ident> ":"  <type-expr> ";"
<assign>     ::= <ident> ":" [<type-expr>] "=" <expr> ";"
<const-def>  ::= "const" <assign>
<alias-def>  ::= "alias"  <ident> "=" <expr> ";"
<type-def>   ::= "type"   <ident> "=" <type-expr> ";"
<record-def> ::= "record" <ident> "{" <decl>* "}"
<fn-def>     ::= <fn-decl> <fn-body>
<import>     ::= "import" <ident> ["as" <ident> | "::" <ident>*] ";"
               | "include" <ident> ";"

import re;
import math as m;
import io::print, exit, echo, perror;
include io;

<fn-decl>    ::= <normal> | <curried>
<normal>     ::= <ident> <param-list>
<curried>    ::= <fn-decl> <param-list>
<param-list> ::= "(" [<ident> ("," <ident>)*] ")"
<fn-body>    ::= <return> | "{" <stmt>* "}"

<stmt> ::= <decl>
         | <assign>
         | <reassign>
         | <fn-call>
         | <return>
         | <break>
         | <continue>
         | <if-block>
         | <switch-block>
         | <while-block>
         | <for-block>

<reassign> ::= <ident> "=" <expr> ";"
<fn-call>  ::= <ident> <arg-list> | <fn-call> <arg-list>
<return>   ::= "=>" <expr> ";"

<arg-list> ::= "(" [<expr> ("," <expr>)*] ")"

<expr> ::= <concrete-value>
         | <unary-op-app>
         | <binary-op-app>
         | <ternary>
         | <match-expr>
         | <fn-app>

<concrete-value> ::= <int-value> | <float-value> | <bool-value>
<unary-op-app>   ::= <unary-op> <expr>
<binary-op-app>  ::= <expr> <binary-op> <expr>
<ternary>        ::= "when" <cond> "->" <expr> "|" <expr>

<match-expr>   ::= "match" <expr> "with" <match-body>
<match-body>   ::= ["|"] <match-clause> ("|" <match-clause>)*
<match-clause> ::= <expr> "->" <expr>

<block> ::= <switch-block> | <if-block> | <for-block> | <while-block>

<switch-block> ::= "switch" <expr> "{"
                   ("case" <const-expr> ":" <stmt>*)*
                   ["default"           ":" <stmt>*]
                   "}"

<if-block>     ::= "if"    <cond> "{" <stmt>* "}"
                   ("elif" <cond> "{" <stmt>* "}")*
                   ["else"        "{" <stmt>* "}"]

<for-block>    ::= "for" <param> "in" <iterable>    "{" <stmt>* "}"

<while-block>  ::= "while" <cond> ["," <stmt>] "{" <stmt>* "}"

<import>  ::= "import"  <module-path> ";"
<include> ::= "include" <file-path>   ";"
